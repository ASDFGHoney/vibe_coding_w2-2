---
description: 
globs: 
alwaysApply: false
---
# GitHub PR 및 이슈 관리 룰

## Pull Request 관리 규칙

### PR 생성 시 필수 사항
1. **제목 규칙**: `[타입] 간략한 설명`
   - 타입: feat, fix, docs, style, refactor, test, chore
   - 예시: `[feat] 채팅 기능 추가`, `[fix] 로그인 버그 수정`

2. **본문 작성**
   - 변경 사항에 대한 명확한 설명
   - 관련 이슈 번호 언급 (Closes #123)
   - 테스트 결과 포함

3. **체크리스트**
   - [ ] 코드 리뷰 완료
   - [ ] 테스트 통과
   - [ ] 문서 업데이트 (필요시)
   - [ ] 브레이킹 체인지 확인

### PR 라벨 관리
- `feature`: 새로운 기능 추가
- `bugfix`: 버그 수정
- `enhancement`: 기능 개선
- `documentation`: 문서 관련
- `refactoring`: 코드 리팩토링
- `testing`: 테스트 관련
- `urgent`: 긴급 수정
- `breaking-change`: 브레이킹 체인지

### PR 할당 규칙
- 작성자: 본인
- 리뷰어: 팀 리더 또는 관련 개발자
- 승인 후 본인이 머지

## Issue 관리 규칙

### 이슈 생성 시 필수 사항
1. **제목 규칙**: `[타입] 간략한 설명`
   - 타입: bug, feature, question, enhancement, documentation

2. **본문 템플릿**
   ```
   ## 설명
   이슈에 대한 상세 설명

   ## 재현 방법 (버그의 경우)
   1. 단계별 재현 방법
   2. 예상 결과
   3. 실제 결과

   ## 체크리스트
   - [ ] 기능 요구사항 정의
   - [ ] 테스트 케이스 작성
   - [ ] 문서 업데이트
   ```

### 이슈 라벨 관리
- `bug`: 버그 신고
- `feature`: 새로운 기능 요청
- `enhancement`: 기능 개선
- `question`: 질문
- `documentation`: 문서 관련
- `good-first-issue`: 초보자 적합
- `help-wanted`: 도움 필요
- `wontfix`: 수정하지 않음
- `duplicate`: 중복 이슈

### 이슈 할당 규칙
- 버그: 담당 개발자 또는 발견자
- 기능 요청: 기능 담당자
- 질문: 관련 전문가

### 우선순위 관리
- `priority: high`: 높은 우선순위
- `priority: medium`: 보통 우선순위  
- `priority: low`: 낮은 우선순위

## 자동화 규칙

### GitHub Actions 활용
1. **PR 생성 시 자동 체크**
   - 테스트 실행
   - 코드 품질 검사
   - 자동 라벨링

2. **이슈 생성 시 자동 처리**
   - 템플릿 확인
   - 자동 할당
   - 라벨링

3. **코드 리뷰 자동화**
   - AI 기반 코드 리뷰
   - 컨벤션 체크
   - 보안 취약점 검사

## 브랜치 전략

### 브랜치 네이밍 규칙
- `feature/기능명`: 새로운 기능 개발
- `fix/버그명`: 버그 수정
- `hotfix/긴급수정명`: 긴급 수정
- `release/버전명`: 릴리즈 준비

### 머지 규칙
- main 브랜치는 항상 배포 가능한 상태 유지
- PR 승인 후에만 머지 가능
- 테스트 통과 후에만 머지 가능
